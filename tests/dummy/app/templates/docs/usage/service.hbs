{{! template-lint-disable no-action no-curly-component-invocation no-implicit-this }}
<h2>How to use as service</h2>
<p>
  Sometimes there is not need to get the full information of a place everytime a user types a word inside the input, that
  is why this service exists. This service interacts with the Google Place Autocomplete API and uses benefits like the usage of the <i>sessionToken</i>.

  The <i>sessionToken</i> is useful to reduce the cost of using the Google Places API. Official information about this topic is available <a href="https://developers.google.com/places/web-service/usage-and-billing#about-autocomplete-sessions" target="_blank" rel="noopener noreferrer">here</a>
</p>
<p>
  If you want to know more about the Google Place Autocomplete service, read about it <a href="https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service" target="_blank" rel="noopener noreferrer">here</a>
</p>
<h3 class="f3">Example</h3>
<p>
  The following example of service usage creates an input field that mimics the functionality of the input field
  provided by this addon. In order to have a better example, <CodeInline>ember-power-select</CodeInline> is used to
  have a better input text an get cross browser compatibility for free.
</p>
<p>
  For more information about <CodeInline>ember-power-select</CodeInline> go <a href="https://ember-power-select.com/docs" target="_blank" rel="noopener noreferrer">here</a>.
</p>

<DocsDemo as |demo|>
  {{demo.snippet "service-example-with-power-select.hbs" label="primary"}}
</DocsDemo>

<DocsDemo as |demo|>
  <demo.example @name="service-example-with-power-select.hbs">
    <PowerSelect
      @options={{predictions}}
      @onchange={{action "findPlaceDetails"}}
      @selected={{selectedPlace}}
      @search={{action "requestPredictions"}}
      @allowClear={{true}}
      as |prediction|
    >
      {{prediction.description}}
    </PowerSelect>
  </demo.example>
</DocsDemo>
<p class="text-red-400 text-sm">
  Autocompletion could stop working on this example, because it uses a GOOGLE API KEY with limited number of request per day
</p>

{{#if placeServiceResultJSON}}
  <p>Google response</p>
  <CodeBlock @language="javascript">
    {{placeServiceResultJSON}}
  </CodeBlock>
{{/if}}

<DocsDemo as |demo|>
  {{demo.snippet "application-full.js" label="controllers/application.js"}}
  {{demo.snippet "application-full.hbs" label="templates/application.hbs"}}
</DocsDemo>
<DocsDemo as |demo|>
  <demo.example @name="application-full.js" @classNames="hidden">
    import Controller from '@ember/controller';
    import { inject as service } from '@ember/service';
    import { isBlank } from '@ember/utils';
    import { next } from '@ember/runloop';

    export default Controller.extend({
      googlePlaceAutocompleteService: service('google-place-autocomplete'),

      async _getPlaceDetails(placeId) {
        let googleRequest = {
          placeId: placeId,
          fields: ['address_components', 'formatted_address', 'place_id', 'rating']
        };
        let placeDetails = await this.get('googlePlaceAutocompleteService').getDetails(googleRequest);
        this._refreshPrettyResponse(placeDetails);
      },

      _refreshPrettyResponse(placeDetails) {
        this.set('placeServiceResultJSON', null);
        next(() => {
          this.set('placeServiceResultJSON', JSON.stringify(placeDetails, undefined, 2));
        });
      },

      actions: {
        findPlaceDetails(selectedPlace) {
          if (isBlank(selectedPlace)) {
            this.setProperties({
              selectedPlace: null,
              predictions: [],
              placeServiceResultJSON: null
            });
            return;
          }

          this._getPlaceDetails(selectedPlace.place_id);
          this.setProperties({
            selectedPlace: selectedPlace,
            predictions: []
          });
        },

        async requestPredictions(placeServiceInput) {
          if (isBlank(placeServiceInput)) {
            this.setProperties({ predictions: [], placeServiceResultJSON: null });
          }
          let properties = { input: placeServiceInput };
          let predictions = await this.get('googlePlaceAutocompleteService').getPlacePredictions(properties);
          this.set('predictions', predictions);
        }
      }
    });
  </demo.example>
  <demo.example @name="application-full.hbs">
    {{!-- MORE CODE HERE --}}

    <PowerSelect
      @options={{predictions}}
      @onchange={{action "findPlaceDetails"}}
      @selected={{selectedPlace}}
      @search={{action "requestPredictions"}}
      @allowClear={{true}}
      as |prediction|
    >

      {{prediction.description}}
    </PowerSelect>

    {{#if placeServiceResultJSON}}
      <p>Google response</p>;
      <pre class="json-result">
        {{placeServiceResultJSON}}
      </pre>
    {{/if}}

    {{!-- MORE CODE HERE --}}
  </demo.example>
</DocsDemo>

<h3>Available functions</h3>
<table class="table-auto">
  <thead>
    <tr>
      <th class="px-4 py-2">Function</th>
      <th class="px-4 py-2">Return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="border px-4 py-2">getPlacePredictions</td>
      <td class="border px-4 py-2">Promise</td>
    </tr>
    <tr>
      <td class="border px-4 py-2">getQueryPredictions</td>
      <td class="border px-4 py-2">Promise</td>
    </tr>
    <tr>
      <td class="border px-4 py-2">getDetails</td>
      <td class="border px-4 py-2">Promise</td>
    </tr>
    <tr>
      <td class="border px-4 py-2">updateSessionToken</td>
      <td class="border px-4 py-2">Void</td>
    </tr>
  </tbody>
</table>
